// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: good.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodServiceClient is the client API for GoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodServiceClient interface {
	GetGoodsByID(ctx context.Context, in *GetGoodsByIDsRequest, opts ...grpc.CallOption) (*GetGoodsByIDsResponse, error)
	UpdateGoodsStoke(ctx context.Context, in *UpdateGoodsStokeRequest, opts ...grpc.CallOption) (*UpdateGoodsStokeResponse, error)
}

type goodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodServiceClient(cc grpc.ClientConnInterface) GoodServiceClient {
	return &goodServiceClient{cc}
}

func (c *goodServiceClient) GetGoodsByID(ctx context.Context, in *GetGoodsByIDsRequest, opts ...grpc.CallOption) (*GetGoodsByIDsResponse, error) {
	out := new(GetGoodsByIDsResponse)
	err := c.cc.Invoke(ctx, "/proto.GoodService/GetGoodsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodServiceClient) UpdateGoodsStoke(ctx context.Context, in *UpdateGoodsStokeRequest, opts ...grpc.CallOption) (*UpdateGoodsStokeResponse, error) {
	out := new(UpdateGoodsStokeResponse)
	err := c.cc.Invoke(ctx, "/proto.GoodService/UpdateGoodsStoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodServiceServer is the server API for GoodService service.
// All implementations must embed UnimplementedGoodServiceServer
// for forward compatibility
type GoodServiceServer interface {
	GetGoodsByID(context.Context, *GetGoodsByIDsRequest) (*GetGoodsByIDsResponse, error)
	UpdateGoodsStoke(context.Context, *UpdateGoodsStokeRequest) (*UpdateGoodsStokeResponse, error)
	mustEmbedUnimplementedGoodServiceServer()
}

// UnimplementedGoodServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoodServiceServer struct {
}

func (UnimplementedGoodServiceServer) GetGoodsByID(context.Context, *GetGoodsByIDsRequest) (*GetGoodsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsByID not implemented")
}
func (UnimplementedGoodServiceServer) UpdateGoodsStoke(context.Context, *UpdateGoodsStokeRequest) (*UpdateGoodsStokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsStoke not implemented")
}
func (UnimplementedGoodServiceServer) mustEmbedUnimplementedGoodServiceServer() {}

// UnsafeGoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodServiceServer will
// result in compilation errors.
type UnsafeGoodServiceServer interface {
	mustEmbedUnimplementedGoodServiceServer()
}

func RegisterGoodServiceServer(s grpc.ServiceRegistrar, srv GoodServiceServer) {
	s.RegisterService(&GoodService_ServiceDesc, srv)
}

func _GoodService_GetGoodsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).GetGoodsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoodService/GetGoodsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).GetGoodsByID(ctx, req.(*GetGoodsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodService_UpdateGoodsStoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsStokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).UpdateGoodsStoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoodService/UpdateGoodsStoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).UpdateGoodsStoke(ctx, req.(*UpdateGoodsStokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodService_ServiceDesc is the grpc.ServiceDesc for GoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoodService",
	HandlerType: (*GoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsByID",
			Handler:    _GoodService_GetGoodsByID_Handler,
		},
		{
			MethodName: "UpdateGoodsStoke",
			Handler:    _GoodService_UpdateGoodsStoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "good.proto",
}
